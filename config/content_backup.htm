<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: fqpabi8</p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-Wayan0907">https://github.com/mdecp2024/hw-Wayan0907</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-Wayan0907">https://mdecp2024.github.io/hw-Wayan0907</a></p>
<h2>Refernces</h2>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w9</h3>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/6rzfUxW6LpQ?si=f8VJ8PVggvADdZ1h" title="YouTube video player" width="560"></iframe></p>
<h3>w10</h3>
<h4>題目一</h4>
<p><span>請利用</span><a href="https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">程式一</a><span>的原始碼, 分別在自己網站的 Brython 頁面、SciTE 編輯器、命令提示字元視窗、Jupyter Lab 以及 Codespaces 環境中執行, 所完成的操作影片, 請以"國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目一: 學號" 作為標題, 並在影片說明欄位中簡述此一影片的操作概要與心得, 完成後請將影片上傳至個人 Youtube 帳號下, 並嵌入個人網站中的 "w10" 頁面中.</span></p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/hpbtlr49E8Y?si=WM4wYCAMCUnzkxGk" title="YouTube video player" width="560"></iframe></p>
<p></p>
<h4>題目二</h4>
<p>請問 Python 程式中有關變數的命名, 除了必須以"_", 以及英文大小寫字母開頭之外, 還有甚麼需要特別注意的地方? 與所謂的"關鍵字"有關係嗎? 請實際舉例, 針對 Python 程式命名的規則編寫程式, 並採上一題的五種程式執行方法, 展示正確變數命名與違反變數命名時, 所顯示的錯誤訊息回應. 影片命名及嵌入網頁要求與題目一相同, 但必須使用"題目二"標示.</p>
<p>變數命名規則 1.開頭字元：變數名稱必須以字母（a-z, A-Z）或底線（_）開頭。 2.後續字元：可以包含字母、數字（0-9）或底線（_）。 3.區分大小寫：myVar 與 myvar 是兩個不同的變數名稱。 4.不允許的字元：變數名稱中不能包含空格、特殊符號（如 @, !, #, $, % 等）。 5.不能使用 Python 關鍵字：如 def, class, if, else, while, for, True, False 等。關鍵字是 Python 保留用來執行特殊功能的詞語，不能作為變數名稱。</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/jhBWzc0cyhI?si=UJQseWlwy_07oXA3" title="YouTube video player" width="560"></iframe></p>
<p></p>
<h4>題目三之一</h4>
<p><span>http://mde.tw/cp2024/content/Problem_set.html 中有利用 Python 程式解決物理與微積分的範例流程, 請根據過程中所得到的 Python 程式, 利用題目一中的五種方法執行後, 在影片說明欄位及個人 w10 頁面中說明解題流程與心得, 影片命名及嵌入網頁要求與題目一相同, 但必須使用"題目三"標示.</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ssqjuurhm2U?si=dDcuh6_V8QNI-w2V" title="YouTube video player" width="560"></iframe></p>
<h4></h4>
<h4>題目三之二</h4>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/39DdT8bnY9A?si=lH0Bf_CFS7cCsfdq" title="YouTube video player" width="560"></iframe></p>
<h3>w11_hw</h3>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/zTK2FmZGL_w?si=HcbdI6_HvVvFiQ6S" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe>圖框</p>
<p><a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/b57fbffd5533aed3f0e865451cdae515/raw/dd15892b73c3e770bf15da24961d67330384e369/123.py">https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/b57fbffd5533aed3f0e865451cdae515/raw/dd15892b73c3e770bf15da24961d67330384e369/123.py</a></p>
<p> </p>
<p>w11 2</p>
<p><a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/b57fbffd5533aed3f0e865451cdae515/raw/dd15892b73c3e770bf15da24961d67330384e369/123.py">https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/b57fbffd5533aed3f0e865451cdae515/raw/dd15892b73c3e770bf15da24961d67330384e369/123.py</a></p>
<p></p>
<p></p>
<p></p>
<h3>w13_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/130e153ba044a83e82af8225666c80f7/raw/1df9cdbc7856b3b7ae2b69c0b3349cf96fbf7c2e/w13.py">w13程式連結</a></p>
<p></p>
<p>心得:經過這次的題目練習，讓我更加善用ai以及學習到更多的程式應用</p>
<h3>w14_ex</h3>
<p></p>
<p><span>請根據兩個圓繪圖所圍成的</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/0e370b2ad0c429ab4c8905244022c27cfca8cfba/two_cicle_fill_ex1.py">區域</a><span>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</span></p>
<p><a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/a93aa2dc29cc17dee4b47a21abeb9650/raw/e7f5e59fd2a42421a0975ee183d7318bb29fc5a3/w14.py">多圓的重疊</a></p>
<p></p>
<p></p>
<h3>w15</h3>
<p>題目一: 請利用 Gist 與 Brython 程式環境, 在個人的課程網站中新增一個頁面, 標題為 w15, 以"從 1 累加到 100"作為 anchor 的連結標題, 使用者點擊該連結之後, 可從各自的 Brython 頁面執行程式.</p>
<p><a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/c37787acb956bb134166471fa9a415d9/raw/3d1517bc5f36d4bfe3ebb9120d38d7e5caa669ea/w15.py">從 1 累加到 100</a></p>
<p></p>
<p><span>題目二: 延伸上題, 設計一個函式 addto(1, 100), 可以完成上述的累加結果. (以"addto"作為連結標題)</span></p>
<p><a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/716abab8ab04eb9386476b4309484eb5/raw/9a790a4c71161df336a22d1b0cc1aadcb5c7ea87/w15%25202.py">addto</a></p>
<p></p>
<p>題目三: 延伸上題, 設計一個函式 add_only_even(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果. 頁面中請以 <span>add_only_even 作為連結標題.</span></p>
<p><a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/2ba4dd3cd4172bf7ed3794dfce3b21f3/raw/4451f770b4c544dc8e1063994e0b5561f04f5a57/w15%25203.py">add_only_even </a></p>
<p></p>
<p><span>題目四: 延伸上題, 設計一個函式 add_avoid_8(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加過程, 必須避開數字出現"8"的整數, 頁面中請以 add_avoid_8 作為連結標題.</span></p>
<p><a href="/get_page/Brython?src=https://gist.githubusercontent.com/Wayan0907/15ffba69160c9d9dd644e88b67edabfc/raw/0d299df0faad28a4ed9674e425c452bc8f0cf411/w15%25204.py"><span>add_avoid_8</span></a></p>
<p><span></span></p>
<p><span></span></p>
<p><span></span></p>
<p><span></span></p>
<h3>w12_hw</h3>
<p>第一題:Text, questions, and art (文字、問題和藝術)</p>
<p>說明:<span>input為輸入()中為問題,使用者輸入之答案會變成返回的值</span></p>
<p><span>input()程式範例:<a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/04d41a17a59ed0b0907081de7622dc2a/raw/fa2bded6ed37e7261e6d35b443ac41306070a17f/w12%252001.py">what's your name</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">name = input("What's your name? ")  # 提示使用者輸入名字
print(f"My name is , {name}!")            # 使用 f-string 輸出打招呼的訊息
input("What's your name?")</pre>
<p><span>print()程式範例:<a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/86afaddbd2021c4a1b6767ac5c3554bc/raw/aa47fc4d36902dde65dea0f1b58bd35c5c4b6c4e/w12%252002.py">cat</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">print ("   /\_/\   ")
print (" &gt;^.^&lt;   ")
print ("    / \    ")
print ("   (___)___")</pre>
<p>第二題:<em>變數</em></p>
<p>說明:Variables and string concatenation(變數和字串連接)</p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/b2d929fee44c5fb5bb70afa62162e6b3/raw/5eee4db01fa36c527e329bcae1e03ef7afb0fa00/w12%252003.py">名字</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">first_name = "yu" #變數first_name為"自己的姓"
last_name  = "chang" #變數last_name為"自己的名"
print (first_name) #列印變數first_name
print (last_name) #列印變數last_name</pre>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/9a16551e70caad6908c31a8f634ade4a/raw/b32b955705e62a19d172fdfd89b490023d7aa0d1/w12%252004.py">名字+最愛的食物</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">name = input("What's your name?") #變數name為input所輸入之文字
favorite_food = input ("What is your favorite food?") #變數favorite_food為input所輸入之文字
print ("Hi! My name is " + name) #列印"Hi! My name is "(這段為文字) + name(name這個變數的數值)
print ("My favorite food is " + favorite_food)  #列印"My favorite food is "(這段為文字) + favorite_food(favorite_food這個變數的數值)
print (name + "'s favorite food is " + favorite_food) #列印name (數值)+ 's favorite food is (此段為文字)+favorite_food(數值)
</pre>
<p>第三題:In a bookstore(在書店)</p>
<p>說明:Lists and if... in... / else... (列表和<span>if... in... / else...)</span></p>
<p>範例程式:<a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/939c86b8ff0b77ea1f66c28a5cd93021/raw/015bb9dedc38090dd8af21017bb0010b5d5858f5/w12%252005.py">if</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">programming_books = ["Learn python", "Python for all",  "Intro to python"]
print (programming_books)
wanted_book = input("Hi! What book would you like to buy?")
print (wanted_book)
if wanted_book in programming_books:
    print ("Yes, we sell it!")
else:
    print ("Sorry, we don't sell that book")</pre>
<p><span> </span></p>
<p>第四題:<em>append()和remove()</em></p>
<p>說明:<span>使用append()進行加入接著使用remove()移除清單內無需購買之物品</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/646f02a14bf08931b0f1cb7a5fb98b78/raw/23113bd8b673c26db0195791b57a6ab15d3bb566/w12%252006.py">購物清單</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">shopping_list = ["carrots", "chocolate", "olives"] #在shopping_list變數裡面有3個字串
print (shopping_list) #列印shopping_list變數
new_item = input("What else do I have to buy?") #設定一個變數為new_item其等於input指令回傳之數值
 
if new_item in shopping_list:  #如果 "變數new_item(想買的物品)"回傳之值 在"shopping_list(購物清單)"字串當中就執行以下程式
    print (new_item + " is/are already in the shopping list") #列印 "new_item變數的數值"+字串is/are already in the shopping list
    print (shopping_list) #列印shopping_list字串
else:                    #反之
    shopping_list.append(new_item) #購物清單.加入(想要購買的物品)    如果不在購物清單內那就將未在字串中物品加入購物清單
    print (shopping_list) #列印購物清單
#以下是移除物品的程式
item_to_remove = input("What do I have to remove?") #item_to_remove(想要移除的物品)
 
if item_to_remove in shopping_list: #如果 想要移除的物品在購物清單中 那就執行
    shopping_list.remove(item_to_remove) #把購物清單.移除(想要移除的物品)
    print (shopping_list) #列印購物清單
else:                     #反之
    print (item_to_remove + " is/are not in the list") #列印 想要移除的物品+is/are not in the list(不在清單中)
    print (shopping_list) #列印購物清單</pre>
<p>第五題:Customizing the menu(自訂菜單)</p>
<p>說明:List methods: .index(), .pop(), and .insert() (列表方法:<span>.index(), .pop(), and .insert())</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/09a4fbba83a50f9920f9e49d9fa00b5a/raw/a04ae627ef348989f1180d02a18ae72957d7051d/w12%252007.py">menu</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">todays_menu = ["burger", "salad", "coke"] #todays_menu變數=今天菜單["burger", "salad", "coke"
side_dish_index = todays_menu.index("salad") #side_dish_index變數 = 今日菜單.找出"沙拉"位於字串中第幾個
print (side_dish_index) #列印side_dish_index  列印他在第幾位
todays_menu.pop(side_dish_index) #今日菜單.移除字串中的元素(side_dish_index變數"沙拉")  這裡意思是移除沙拉
print (todays_menu) #列印今日菜單
todays_menu.insert(side_dish_index, "fries") #今日菜單.在字串中插入(side_dish_index, "fries")   這裡意思是加入薯條
print (todays_menu) #列印今日菜單</pre>
<p>第六題:Traveling around the world(環遊世界)</p>
<p><span>說明:</span>List slicing(串列切片)</p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/02bdecb4e6e8840042c923684b772fd1/raw/bf56c260ead7359975d35376305b7ab44f98213f/w12%252008.py">城市</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義一個名為 cities 的串列，包含五個城市名稱
cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"]
  
# 列印整個串列
print (cities)  # ['San Diego', 'Prague', 'Cape Town', 'Tokyo', 'Melbourne']
  
# 列印索引為 1 的元素
print (cities[1])  # 'Prague'
  
# 列印從索引 1 到 3 的元素（不包含索引 4）
print (cities[1:4])  # ['Prague', 'Cape Town', 'Tokyo']
  
# 列印從索引 1 到 3 的元素，間隔為 2
print (cities[1:4:2])  # ['Prague', 'Tokyo']
  
# 列印從索引 0 到 2 的元素（不包含索引 3）
print (cities[0:3])  # ['San Diego', 'Prague', 'Cape Town']
  
# 列印從開始到索引 2 的元素（不包含索引 3）
print (cities[:3])  # ['San Diego', 'Prague', 'Cape Town']
  
# 列印從索引 2 到 4 的元素（不包含索引 5）
print (cities[2:5])  # ['Cape Town', 'Tokyo', 'Melbourne']
  
# 列印從索引 2 到最後的元素
print (cities[2:])  # ['Cape Town', 'Tokyo', 'Melbourne']
  
# 列印從索引 0 到 4 的元素，每隔 2 個元素
print (cities[0:5:2])  # ['San Diego', 'Cape Town', 'Melbourne']
  
# 列印從頭到尾的元素，每隔 2 個元素
print (cities[::2])  # ['San Diego', 'Cape Town', 'Melbourne']
  
# 列印索引為 4 的元素
print (cities[4])  # 'Melbourne'
  
# 列印最後一個元素（索引 -1）
print (cities[-1])  # 'Melbourne'
  
# 列印從索引 -4 到 -2 的元素（不包含索引 -1）
print (cities[-4:-1])  # ['Prague', 'Cape Town', 'Tokyo']
  
# 列印從索引 3 到 1，反向取值
print (cities[3:0:-1])  # ['Tokyo', 'Cape Town', 'Prague']
  
# 列印從索引 -2 到 -4，反向取值
print (cities[-2:-5:-1])  # ['Tokyo', 'Cape Town', 'Prague']
  
# 列印整個串列，反轉順序
print (cities[::-1])  # ['Melbourne', 'Tokyo', 'Cape Town', 'Prague', 'San Diego']</pre>
<p>第七題:Senses, planets, and a houseng(感官、行星、房子)</p>
<p><span>說明:Changing, adding, and removing list elements using slicing(透過切片操作來更改、添加和刪除串列中的元素)</span></p>
<p>第七題:Senses, planets, and a houseng(感官、行星、房子)</p>
<p><span>說明:Changing, adding, and removing list elements using slicing(透過切片操作來更改、添加和刪除串列中的元素)</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/e135c97d895403239260952e279954c2/raw/e7b0758be8f2d4fb4db8f676a897b67a23808e1f/w12%252009.py">感官</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義一個包含五種感官的清單
senses = ["eyes", "nose", "ears", "tongue", "skin"]
print(senses)  # 輸出原始的感官清單
  
# 將清單中索引為1的元素從 "nose" 改為 "smell"
senses[1] = "smell"
print(senses)  # 輸出更新後的感官清單
  
# 將索引範圍為3到5的元素（"tongue", "skin"）改為 ["taste", "touch"]
senses[3:5] = ["taste", "touch"]
print(senses)  # 輸出更新後的感官清單
  
# 將索引範圍從0到3，步長為2的元素（"eyes", "ears"）改為 ["sight", "hearing"]
senses[0:3:2] = ["sight", "hearing"]
print(senses)  # 輸出最終更新後的感官清單</pre>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/2f6fb2d6dae09f0e390ca364d80000f8/raw/205f92c9a5b8610c158582c0e825d4d17a7601dd/w12%252010.py">行星</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義一個行星列表
planets = ["Mercury", "Mars", "Earth", "Neptune"]
# 輸出原始行星列表
print(planets)
  
# 將 "Jupiter" 加入列表的末尾
planets = planets + ["Jupiter"]
# 輸出更新後的行星列表
print(planets)
  
# 在索引 2 前插入 "Venus"
# 先取出索引 0 到 1 的元素，然後加上 "Venus" 和索引 2 到 4 的元素
planets = planets[0:2] + ["Venus"] + planets[2:5]
# 輸出再次更新的行星列表
print(planets)
  
# 在索引 5 位置後插入 "Uranus" 和 "Saturn"
# 取出索引 0 到 4 的元素，加上新元素，然後加上索引 5 之後的元素
planets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]
# 輸出最終的行星列表
print(planets)</pre>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/2246640b9b51b970e47837b5d17286d8/raw/255aad36f01d996350a9afa431556c0bf33e98fa/w12%252011.py">房子</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">house = ["kitchen", "dining room", "living room", "bedroom", "bathoom", "garden", "balcony", "terrace"]
print(house)  # 原始列表
  
# 刪除 "dining room"
del house[1]
print(house)  # ["kitchen", "living room", "bedroom", "bathoom", "garden", "balcony", "terrace"]
  
# 刪除 "garden" 和 "balcony"
del house[4:6]
print(house)  # ["kitchen", "living room", "bedroom", "bathoom", "terrace"]
  
# 刪除 "kitchen", "bedroom", 和 "terrace"
del house[::2]
print(house)  # ["living room", "bathoom"]
  
# 刪除整個清單
del house
try:
    print(house)  # 此處會觸發 NameError
except NameError:
    print("The variable 'house' no longer exists.")</pre>
<p>第八題:My friends' favorite dishes(<span>我朋友最喜歡的菜</span>)</p>
<p><span>說明:for ... in range() (循環控制語句)</span></p>
<p data-pm-slice="1 1 []"><span>範例程式:<a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/6dfae6b09334019a080e570df8e09dab/raw/c73c4c5125807b4b17ab873edb123d2e465641e3/w12%252012.py">我朋友最喜歡的菜</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義朋友的名字列表
friends = ["Geetha", "Luca", "Daisy", "Juhan"]  
  
# 定義喜愛的食物列表
dishes  = ["sushi", "burgers", "tacos", "pizza"]  
  
# 打印朋友的名字
print("My friends' names are:")  
print(friends)  
  
# 使用 for 迴圈遍歷朋友列表，打印索引和對應的朋友名字
for index in range(0, 4):  
    print("index:  " + str(index))  # 打印當前索引
    print("friend: " + friends[index])  # 打印對應的朋友名字
  
# 打印喜愛的食物
print("Their favorite dishes are:")  
print(dishes)  
  
# 使用 for 迴圈遍歷食物列表，打印索引和對應的食物
for index in range(0, 4):  
    print("index:  " + str(index))  # 打印當前索引
    print("dish: " + dishes[index])  # 打印對應的食物
  
# 使用 for 迴圈，同時列出朋友和他們喜愛的食物
for index in range(0, 4):  
    print("My friend " + friends[index] + "'s favorite dish is " + dishes[index])</pre>
<p><span>第九題:</span><span>At the zoo(</span><span>在動物園)</span></p>
<p><span>說明:For loop with if... == ... / else</span>(在 for 迴圈中 逐一遍歷（迭代） 元素，並使用 if...else 條件判斷)</p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/65e27b90b5b86ac2322f1adfe2cd9ea5/raw/4497dc06ed95142872c26f9b152bf25ed40a8594/w12%252013.py">動物</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 動物清單
animals = ["giraffe", "penguin", "dolphin"]
print(animals)  # 輸出清單
  
# 針對清單中的每個位置進行操作
for i in range(0, len(animals)):  # 使用 len() 動態取得清單長度
    print("-- Beginning of loop --")
    # 輸出每個元素及其位置
    print("The element in position " + str(i) + " is " + animals[i])
  
# 想要看到的動物
wanted_to_see = "penguin"
  
# 針對清單中的每個位置進行操作
for i in range(0, len(animals)):
    # 如果當前的動物是想看的那個
    if animals[i] == wanted_to_see:
        # 輸出特別訊息
        print("I saw a " + animals[i] + " and I really wanted to see it!")
    # 如果當前的動物不是特別想看的那個
    else:
        # 輸出一般訊息
        print("I saw a " + animals[i])</pre>
<p><span>第十題</span><span>:Where are my gloves?</span><span>(</span><span>我的手套在哪裡？</span><span>)</span></p>
<p><span>說明:For loop for searching(在 for 迴圈中 逐一遍歷（迭代） 元素，並使用 if...else 條件判斷))</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/b44a4ceaec268623483ee60243363b57/raw/ff1ec41cc200a51265a8f9995d1b09d1c1081a6a/w12%252014.py">物品位置</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">accessories = ["belt", "hat", "gloves", "sunglasses", "ring"]
print(accessories)
  
# 逐一列出元素及其位置
for i in range(len(accessories)):
    print(f"The element {accessories[i]} is in position {i}")
  
# 列出長度等於 6 的元素
for i in range(len(accessories)):
    if len(accessories[i]) == 6:
        print(f"The element {accessories[i]} is in position {i} and it has 6 characters")
  
# 列出長度小於 6 的元素
for i in range(len(accessories)):
    if len(accessories[i]) &lt; 6:
        print(f"The element {accessories[i]} is in position {i} and it has less than 6 characters")
  
# 定義閾值：6，列出長度大於 6 的元素
n_of_characters = 6
for i in range(len(accessories)):
    if len(accessories[i]) &gt; n_of_characters:
        print(f"The element {accessories[i]} is in position {i} and it has more than {n_of_characters} characters")
  
# 定義閾值：6，列出長度不等於 6 的元素
for i in range(len(accessories)):
    if len(accessories[i]) != n_of_characters:
        print(f"The element {accessories[i]} is in position {i} and it has a number of characters different from {n_of_characters}")
  
# 定義閾值：2，列出位置小於或等於 2 的元素
position = 2
for i in range(len(accessories)):
    if i &lt;= position:
        print(f"The element {accessories[i]} is in position {i}, which is less than or equal to {position}")
  
# 定義閾值：2，列出位置大於或等於 2 的元素
for i in range(len(accessories)):
    if i &gt;= position:
        print(f"The element {accessories[i]} is in position {i}, which is at least {position}")</pre>
<p></p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p><a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/8fb7ec8718b42fafe04d1ad6b2f12237/raw/0913e7282628f85571a13fa6baf3be3d265b3a3e/w16.py">w16_exam1</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html
import math
 
# 初始化 HTML，確保 canvas 元素存在
def setup_canvas():
    if not document.querySelector("#my_canvas"):
        canvas = html.CANVAS(id="my_canvas", width=800, height=600)
        document &lt;= canvas
 
setup_canvas()
 
# 設定畫布
canvas = document["my_canvas"]
ctx = canvas.getContext("2d")
 
# 設定原點
origin_x, origin_y = 32, 21   
 
# 繪製 X 軸
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(500, origin_y)
ctx.strokeStyle = "black"
ctx.lineWidth = 2
ctx.stroke()
 
# 繪製 Y 軸
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(origin_x, 300)
ctx.stroke()
 
# 標註原點
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText("(32, 21)", origin_x + 5, origin_y - 5)
 
# 六邊形
hex_x, hex_y = 100, 100
ctx.beginPath()
for i in range(6):
    angle = i * (2 * math.pi / 6)
    x = hex_x + 30 * math.cos(angle)
    y = hex_y + 30 * math.sin(angle)
    if i == 0:
        ctx.moveTo(x, y)
    else:
        ctx.lineTo(x, y)
ctx.closePath()
ctx.fillStyle = "DarkOrange"
ctx.fill()
 
# 菱形
ctx.beginPath()
ctx.moveTo(160, 70)
ctx.lineTo(180, 100)
ctx.lineTo(160, 130)
ctx.lineTo(140, 100)
ctx.closePath()
ctx.fillStyle = "DarkCyan"
ctx.fill()
 
# 三角形
ctx.beginPath()
ctx.moveTo(165, 130)
ctx.lineTo(205, 130)
ctx.lineTo(185, 100)
ctx.closePath()
ctx.fillStyle = "DodgerBlue"
ctx.fill()
 
# 圓形
ctx.beginPath()
ctx.arc(230, 100, 30, 0, 2 * math.pi)
ctx.fillStyle = "MediumVioletRed"
ctx.fill()
 
# 正方形
ctx.beginPath()
ctx.rect(265, 75, 50, 50)
ctx.fillStyle = "Khaki"
ctx.fill()
 
# 長方形
ctx.beginPath()
ctx.rect(320, 90, 60, 20)
ctx.fillStyle = "Navy"
ctx.fill()</pre>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>  </p>
<p></p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">def print_pyramid(高度):</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    對於範圍（高度）內的 i：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 計算空格和星號的數量</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        空格 = ' ' * (高度 - i - 1)</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        星星 = '*' * (2 * i + 1)</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        列印（空格+星號）</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#設定金字塔的高度</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
金字塔高度 = 6</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
print_pyramid（金字塔高度）</span></span></pre>
<p><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">&gt;pythonw -u "help_range.py" </span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">          * </span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">        *** </span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">      ***** </span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">    ******* </span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">  ********* </span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">*********** </span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">&gt;退出代碼: 0</span></span></p>
<p><br/><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w8</span></span></p>
<p><img alt="" height="471" src="/images/螢幕擷取畫面 2024-10-16 120825.png" width="800"/></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">從 coppeliasim_zmqremoteapi_client 導入 RemoteAPIClient</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
導入時間</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
進口鍵盤</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#利用zmqRemoteAPI以23000對場景伺服器進行連線</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
客戶端 = RemoteAPIClient('[::1]', 23000)</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 以 getObject 方法取得場景對象</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
sim = client.getObject('sim')</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
box = sim.getObject('/box')</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 啟動模擬</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
sim.startSimulation()</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 設定立方體的尺寸和初始位置</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
立方體大小 = 0.2 # 20 厘米</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
開始_x = 0</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
起始y = 0</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
間距 = 0.5 # 50 cm 之間的距離（可依需求調整）</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 收納立方體的行數和每行的數量</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
rows = 5 # 從第 1 行到第 5 行</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
cubes_in_row = [1, 3, 5, 7, 9] # 每行立方體的數量</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 在每一行存放立方體</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
對於範圍內的行（行）：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    # 計算每行的起始x位置，使其最便宜</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    start_row_x = start_x - (cubes_in_row[行] - 1) * 間距 / 2</span></span><span></span>
    <span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    對於範圍內的列（cubes_in_row[row]）：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 計算每個立方體的位置</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        x_position = start_row_x + col * 間距</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        y_position = start_y + 行 * 間距</span></span><span></span>
        <span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 建立立方體</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size,cube_size,cube_size], 0)</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        sim.setObjectPosition(cube_handle, -1, [x_position, y_position,cube_size / 2]) # z 方向上升到立方體的中心</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 完成正方體的收納盒</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
print("立方體已成功出貨！")</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#設定主迴圈</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
而真實：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    # 在這裡可以進行其他模擬操作</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    time.sleep(0.1) #確保迴圈不會太快</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    如果鍵盤.is_pressed('q'):</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 可以按q鍵跳出重複執行迴圈</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        休息</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 終止模擬</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
sim.stopSimulation()</span></span><span></span>
</pre>
<p></p>
<h3>w8</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">從 coppeliasim_zmqremoteapi_client 導入 RemoteAPIClient</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
導入時間</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
進口鍵盤</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#利用zmqRemoteAPI以23000對場景伺服器進行連線</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
客戶端 = RemoteAPIClient('[::1]', 23000)</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 以 getObject 方法取得場景對象</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
sim = client.getObject('sim')</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
box = sim.getObject('/box')</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 啟動模擬</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
sim.startSimulation()</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 設定立方體的尺寸和初始位置</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
立方體大小 = 0.2 # 20 厘米</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
開始_x = 0</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
起始y = 0</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
間距 = 0.5 # 50 cm 之間的距離（可依需求調整）</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 收納立方體的行數和每行的數量</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
rows = 5 # 從第 1 行到第 5 行</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
cubes_in_row = [1, 3, 5, 7, 9] # 每行立方體的數量</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 在每一行存放立方體</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
對於範圍內的行（行）：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    # 計算每行的起始x位置，使其最便宜</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    start_row_x = start_x - (cubes_in_row[行] - 1) * 間距 / 2</span></span><span></span>
    <span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    對於範圍內的列（cubes_in_row[row]）：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 計算每個立方體的位置</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        x_position = start_row_x + col * 間距</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        y_position = start_y + 行 * 間距</span></span><span></span>
        <span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 建立立方體</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size,cube_size,cube_size], 0)</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        sim.setObjectPosition(cube_handle, -1, [x_position, y_position,cube_size / 2]) # z 方向上升到立方體的中心</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 完成正方體的收納盒</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
print("立方體已成功出貨！")</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#設定主迴圈</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
而真實：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    # 在這裡可以進行其他模擬操作</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    time.sleep(0.1) #確保迴圈不會太快</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    如果鍵盤.is_pressed('q'):</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 可以按q鍵跳出重複執行迴圈</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        休息</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 終止模擬</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
sim.stopSimulation()</span></span><span></span>
</pre>
<p><img alt="" height="471" src="/images/螢幕擷取畫面 2024-10-16 120825.png" width="800"/></p>
<h3>w16_exam2</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math


def draw_maze(angle_degrees):
    # 創建畫布
    canvas = html.CANVAS(width=1200, height=1200)
    brython_div = doc["brython_div1"]
    brython_div &lt;= canvas

    # 取得繪圖上下文
    ctx = canvas.getContext("2d")

    # 設置參數
    pixel_scale = 100
    offset_x = 32 * 2
    offset_y = 21 * 2
    # 向右移動的偏移量
    move_right_offset = 200
    angle_radians = math.radians(angle_degrees)

    # 定義迷宮線條
    lines = [
        ((0, 0), (2, 0)),
        ((3, 0), (5, 0)),
        ((5, 0), (5, 5)),
        ((3, 5), (5, 5)),
        ((4, 5), (4, 3)),
        ((1, 3), (4, 3)),
        ((3, 2), (3, 3)),
        ((1, 1), (4, 1)),
        ((4, 1), (4, 2)),
        ((2, 1), (2, 2)),
        ((2, 4), (3, 4)),
        ((2, 4), (2, 5)),
        ((1, 3), (1, 4)),
        ((0, 2), (2, 2)),
        ((0, 5), (2, 5)),
        ((0, 0), (0, 5)),
    ]

    # 旋轉並繪製迷宮線條
    ctx.strokeStyle = "blue"
    ctx.lineWidth = 2
    for line in lines:
        start = line[0]
        end = line[1]

        # 旋轉起點座標
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)

        # 旋轉終點座標
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)

        ctx.beginPath()
        ctx.moveTo(
            offset_x + move_right_offset + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + move_right_offset + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()

    return ctx, offset_x + move_right_offset, offset_y


def label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):
    text_angle_radians = math.radians(text_angle_degrees)
    ctx.font = "18px Arial"
    ctx.fillStyle = "red"
    # 原始文字位置
    original_x = offset_x + 10
    original_y = offset_y - 15
    # 旋轉後的文字位置
    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)
    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)
    ctx.save()
    ctx.translate(offset_x, offset_y)
    ctx.rotate(text_angle_radians)
    ctx.fillText("(32, 21)", 10, - 15)
    ctx.restore()


if __name__ == "__main__":
    
    maze_angle = 0
    text_angle = 0
    ctx, offset_x, offset_y = draw_maze(maze_angle)
    label_coordinate(ctx, offset_x, offset_y, text_angle)</pre>
<p><br/><br/></p>
<p></p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<p><br/><br/></p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p><br/><br/></p>
<p></p><h3>w16_Exam3</h3>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p><h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<p></p>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>