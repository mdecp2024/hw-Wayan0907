<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: fqpabi8</p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-Wayan0907">https://github.com/mdecp2024/hw-Wayan0907</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-Wayan0907">https://mdecp2024.github.io/hw-Wayan0907</a></p>
<h2>Refernces</h2>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w9</h3>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/6rzfUxW6LpQ?si=f8VJ8PVggvADdZ1h" title="YouTube video player" width="560"></iframe></p>
<h3>w10</h3>
<h4>題目一</h4>
<p><span>請利用</span><a href="https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">程式一</a><span>的原始碼, 分別在自己網站的 Brython 頁面、SciTE 編輯器、命令提示字元視窗、Jupyter Lab 以及 Codespaces 環境中執行, 所完成的操作影片, 請以"國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目一: 學號" 作為標題, 並在影片說明欄位中簡述此一影片的操作概要與心得, 完成後請將影片上傳至個人 Youtube 帳號下, 並嵌入個人網站中的 "w10" 頁面中.</span></p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/hpbtlr49E8Y?si=WM4wYCAMCUnzkxGk" title="YouTube video player" width="560"></iframe></p>
<p></p>
<h4>題目二</h4>
<p>請問 Python 程式中有關變數的命名, 除了必須以"_", 以及英文大小寫字母開頭之外, 還有甚麼需要特別注意的地方? 與所謂的"關鍵字"有關係嗎? 請實際舉例, 針對 Python 程式命名的規則編寫程式, 並採上一題的五種程式執行方法, 展示正確變數命名與違反變數命名時, 所顯示的錯誤訊息回應. 影片命名及嵌入網頁要求與題目一相同, 但必須使用"題目二"標示.</p>
<p>變數命名規則 1.開頭字元：變數名稱必須以字母（a-z, A-Z）或底線（_）開頭。 2.後續字元：可以包含字母、數字（0-9）或底線（_）。 3.區分大小寫：myVar 與 myvar 是兩個不同的變數名稱。 4.不允許的字元：變數名稱中不能包含空格、特殊符號（如 @, !, #, $, % 等）。 5.不能使用 Python 關鍵字：如 def, class, if, else, while, for, True, False 等。關鍵字是 Python 保留用來執行特殊功能的詞語，不能作為變數名稱。</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/jhBWzc0cyhI?si=UJQseWlwy_07oXA3" title="YouTube video player" width="560"></iframe></p>
<p></p>
<h4>題目三之一</h4>
<p><span>http://mde.tw/cp2024/content/Problem_set.html 中有利用 Python 程式解決物理與微積分的範例流程, 請根據過程中所得到的 Python 程式, 利用題目一中的五種方法執行後, 在影片說明欄位及個人 w10 頁面中說明解題流程與心得, 影片命名及嵌入網頁要求與題目一相同, 但必須使用"題目三"標示.</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ssqjuurhm2U?si=dDcuh6_V8QNI-w2V" title="YouTube video player" width="560"></iframe></p>
<h4></h4>
<h4>題目三之二</h4>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/39DdT8bnY9A?si=lH0Bf_CFS7cCsfdq" title="YouTube video player" width="560"></iframe></p><h3>w11_hw</h3>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/zTK2FmZGL_w?si=HcbdI6_HvVvFiQ6S" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe>圖框</p>
<p><a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/b57fbffd5533aed3f0e865451cdae515/raw/dd15892b73c3e770bf15da24961d67330384e369/123.py">https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/b57fbffd5533aed3f0e865451cdae515/raw/dd15892b73c3e770bf15da24961d67330384e369/123.py</a></p>
<p> </p>
<p>w11 2</p>
<p><a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/b57fbffd5533aed3f0e865451cdae515/raw/dd15892b73c3e770bf15da24961d67330384e369/123.py">https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/b57fbffd5533aed3f0e865451cdae515/raw/dd15892b73c3e770bf15da24961d67330384e369/123.py</a></p>
<p></p>
<p></p>
<p></p><h3>w13_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/130e153ba044a83e82af8225666c80f7/raw/1df9cdbc7856b3b7ae2b69c0b3349cf96fbf7c2e/w13.py">w13程式連結</a></p>
<p></p>
<p>心得:經過這次的題目練習，讓我更加善用ai以及學習到更多的程式應用</p><h3>w14_ex</h3>
<p></p>
<p><span>請根據兩個圓繪圖所圍成的</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/0e370b2ad0c429ab4c8905244022c27cfca8cfba/two_cicle_fill_ex1.py">區域</a><span>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</span></p>
<p><a href="https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/a93aa2dc29cc17dee4b47a21abeb9650/raw/e7f5e59fd2a42421a0975ee183d7318bb29fc5a3/w14.py">多圓的重疊</a></p>
<p></p>
<p></p><h3>w15</h3>
<p>題目一: 請利用 Gist 與 Brython 程式環境, 在個人的課程網站中新增一個頁面, 標題為 w15, 以"從 1 累加到 100"作為 anchor 的連結標題, 使用者點擊該連結之後, 可從各自的 Brython 頁面執行程式.</p>
<p><a href="/get_page/Brython?src=https://gist.githubusercontent.com/Wayan0907/c37787acb956bb134166471fa9a415d9/raw/3d1517bc5f36d4bfe3ebb9120d38d7e5caa669ea/w15.py">從 1 累加到 100</a></p>
<p></p>
<p><span>題目二: 延伸上題, 設計一個函式 addto(1, 100), 可以完成上述的累加結果. (以"addto"作為連結標題)</span></p>
<p><a href="https://gist.githubusercontent.com/Wayan0907/716abab8ab04eb9386476b4309484eb5/raw/9a790a4c71161df336a22d1b0cc1aadcb5c7ea87/w15%25202.py">addto</a></p>
<p></p>
<p>題目三: 延伸上題, 設計一個函式 add_only_even(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果. 頁面中請以 <span>add_only_even 作為連結標題.</span></p>
<p><a href="/get_page/Brython?src=https://gist.githubusercontent.com/Wayan0907/2ba4dd3cd4172bf7ed3794dfce3b21f3/raw/4451f770b4c544dc8e1063994e0b5561f04f5a57/w15%25203.py">add_only_even </a></p>
<p></p>
<p><span>題目四: 延伸上題, 設計一個函式 add_avoid_8(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加過程, 必須避開數字出現"8"的整數, 頁面中請以 add_avoid_8 作為連結標題.</span></p>
<p><a href="/get_page/Brython?src=https://gist.githubusercontent.com/Wayan0907/15ffba69160c9d9dd644e88b67edabfc/raw/0d299df0faad28a4ed9674e425c452bc8f0cf411/w15%25204.py"><span>add_avoid_8</span></a></p>
<p><span></span></p>
<p><span></span></p>
<p><span></span></p>
<p><span></span></p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p><h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3><span>w16_exam1</span></h3>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p><h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">def print_pyramid(高度):</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    對於範圍（高度）內的 i：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 計算空格和星號的數量</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        空格 = ' ' * (高度 - i - 1)</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        星星 = '*' * (2 * i + 1)</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        列印（空格+星號）</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#設定金字塔的高度</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
金字塔高度 = 6</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
print_pyramid（金字塔高度）</span></span></pre>
<p><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">&gt;pythonw -u "help_range.py" </span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">          * </span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">        *** </span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">      ***** </span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">    ******* </span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">  ********* </span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">*********** </span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">&gt;退出代碼: 0</span></span></p>
<p><br/><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w8</span></span></p>
<p><img alt="" height="471" src="/images/螢幕擷取畫面 2024-10-16 120825.png" width="800"/></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">從 coppeliasim_zmqremoteapi_client 導入 RemoteAPIClient</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
導入時間</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
進口鍵盤</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#利用zmqRemoteAPI以23000對場景伺服器進行連線</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
客戶端 = RemoteAPIClient('[::1]', 23000)</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 以 getObject 方法取得場景對象</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
sim = client.getObject('sim')</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
box = sim.getObject('/box')</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 啟動模擬</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
sim.startSimulation()</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 設定立方體的尺寸和初始位置</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
立方體大小 = 0.2 # 20 厘米</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
開始_x = 0</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
起始y = 0</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
間距 = 0.5 # 50 cm 之間的距離（可依需求調整）</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 收納立方體的行數和每行的數量</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
rows = 5 # 從第 1 行到第 5 行</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
cubes_in_row = [1, 3, 5, 7, 9] # 每行立方體的數量</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 在每一行存放立方體</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
對於範圍內的行（行）：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    # 計算每行的起始x位置，使其最便宜</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    start_row_x = start_x - (cubes_in_row[行] - 1) * 間距 / 2</span></span><span></span>
    <span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    對於範圍內的列（cubes_in_row[row]）：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 計算每個立方體的位置</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        x_position = start_row_x + col * 間距</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        y_position = start_y + 行 * 間距</span></span><span></span>
        <span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 建立立方體</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size,cube_size,cube_size], 0)</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        sim.setObjectPosition(cube_handle, -1, [x_position, y_position,cube_size / 2]) # z 方向上升到立方體的中心</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 完成正方體的收納盒</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
print("立方體已成功出貨！")</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#設定主迴圈</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
而真實：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    # 在這裡可以進行其他模擬操作</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    time.sleep(0.1) #確保迴圈不會太快</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    如果鍵盤.is_pressed('q'):</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 可以按q鍵跳出重複執行迴圈</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        休息</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 終止模擬</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
sim.stopSimulation()</span></span><span></span>
</pre>
<p></p>
<h3>w8</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">從 coppeliasim_zmqremoteapi_client 導入 RemoteAPIClient</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
導入時間</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
進口鍵盤</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#利用zmqRemoteAPI以23000對場景伺服器進行連線</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
客戶端 = RemoteAPIClient('[::1]', 23000)</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 以 getObject 方法取得場景對象</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
sim = client.getObject('sim')</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
box = sim.getObject('/box')</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 啟動模擬</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
sim.startSimulation()</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 設定立方體的尺寸和初始位置</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
立方體大小 = 0.2 # 20 厘米</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
開始_x = 0</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
起始y = 0</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
間距 = 0.5 # 50 cm 之間的距離（可依需求調整）</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 收納立方體的行數和每行的數量</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
rows = 5 # 從第 1 行到第 5 行</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
cubes_in_row = [1, 3, 5, 7, 9] # 每行立方體的數量</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 在每一行存放立方體</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
對於範圍內的行（行）：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    # 計算每行的起始x位置，使其最便宜</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    start_row_x = start_x - (cubes_in_row[行] - 1) * 間距 / 2</span></span><span></span>
    <span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    對於範圍內的列（cubes_in_row[row]）：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 計算每個立方體的位置</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        x_position = start_row_x + col * 間距</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        y_position = start_y + 行 * 間距</span></span><span></span>
        <span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 建立立方體</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size,cube_size,cube_size], 0)</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        sim.setObjectPosition(cube_handle, -1, [x_position, y_position,cube_size / 2]) # z 方向上升到立方體的中心</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 完成正方體的收納盒</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
print("立方體已成功出貨！")</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#設定主迴圈</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
而真實：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    # 在這裡可以進行其他模擬操作</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    time.sleep(0.1) #確保迴圈不會太快</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    如果鍵盤.is_pressed('q'):</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 可以按q鍵跳出重複執行迴圈</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        休息</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 終止模擬</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
sim.stopSimulation()</span></span><span></span>
</pre>
<p><img alt="" height="471" src="/images/螢幕擷取畫面 2024-10-16 120825.png" width="800"/></p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<p></p>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>