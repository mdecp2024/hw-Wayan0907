var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼: fqpabi8 \n 個人倉儲: https://github.com/mdecp2024/hw-Wayan0907 \n 個人網站: https://mdecp2024.github.io/hw-Wayan0907 \n', 'tags': '', 'url': 'About.html'}, {'title': 'Refernces', 'text': '其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'Refernces.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w9', 'text': '\n \n', 'tags': '', 'url': 'w9.html'}, {'title': 'w10', 'text': '題目一 \n 請利用 程式一 的原始碼, 分別在自己網站的 Brython 頁面、SciTE 編輯器、命令提示字元視窗、Jupyter Lab 以及 Codespaces 環境中執行, 所完成的操作影片, 請以"國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目一: 學號" 作為標題, 並在影片說明欄位中簡述此一影片的操作概要與心得, 完成後請將影片上傳至個人 Youtube 帳號下, 並嵌入個人網站中的 "w10" 頁面中. \n \n \n \n 題目二 \n 請問 Python 程式中有關變數的命名, 除了必須以"_", 以及英文大小寫字母開頭之外, 還有甚麼需要特別注意的地方? 與所謂的"關鍵字"有關係嗎? 請實際舉例, 針對 Python 程式命名的規則編寫程式, 並採上一題的五種程式執行方法, 展示正確變數命名與違反變數命名時, 所顯示的錯誤訊息回應. 影片命名及嵌入網頁要求與題目一相同, 但必須使用"題目二"標示. \n 變數命名規則 1.開頭字元：變數名稱必須以字母（a-z, A-Z）或底線（_）開頭。 2.後續字元：可以包含字母、數字（0-9）或底線（_）。 3.區分大小寫：myVar 與 myvar 是兩個不同的變數名稱。 4.不允許的字元：變數名稱中不能包含空格、特殊符號（如 @, !, #, $, % 等）。 5.不能使用 Python 關鍵字：如 def, class, if, else, while, for, True, False 等。關鍵字是 Python 保留用來執行特殊功能的詞語，不能作為變數名稱。 \n \n \n 題目三之一 \n http://mde.tw/cp2024/content/Problem_set.html 中有利用 Python 程式解決物理與微積分的範例流程, 請根據過程中所得到的 Python 程式, 利用題目一中的五種方法執行後, 在影片說明欄位及個人 w10 頁面中說明解題流程與心得, 影片命名及嵌入網頁要求與題目一相同, 但必須使用"題目三"標示. \n \n \n 題目三之二 \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': '\n 圖框 \n https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/b57fbffd5533aed3f0e865451cdae515/raw/dd15892b73c3e770bf15da24961d67330384e369/123.py \n \xa0 \n w11 2 \n https://mdecp2024.github.io/hw-Wayan0907/content/Brython.html?src=https://gist.githubusercontent.com/Wayan0907/b57fbffd5533aed3f0e865451cdae515/raw/dd15892b73c3e770bf15da24961d67330384e369/123.py \n \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w13_hw', 'text': 'w13程式連結 \n \n 心得:經過這次的題目練習，讓我更加善用ai以及學習到更多的程式應用', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_ex', 'text': '\n 請根據兩個圓繪圖所圍成的 區域 (目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務. \n 多圓的重疊 \n \n', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'w15', 'text': '題目一: 請利用 Gist 與 Brython 程式環境, 在個人的課程網站中新增一個頁面, 標題為 w15, 以"從 1 累加到 100"作為 anchor 的連結標題, 使用者點擊該連結之後, 可從各自的 Brython 頁面執行程式. \n 從 1 累加到 100 \n \n 題目二: 延伸上題, 設計一個函式 addto(1, 100), 可以完成上述的累加結果. (以"addto"作為連結標題) \n addto \n \n 題目三: 延伸上題, 設計一個函式 add_only_even(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果. 頁面中請以\xa0 add_only_even 作為連結標題. \n add_only_even\xa0 \n \n 題目四: 延伸上題, 設計一個函式 add_avoid_8(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加過程, 必須避開數字出現"8"的整數,\xa0頁面中請以\xa0add_avoid_8 作為連結標題. \n add_avoid_8 \n \n \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'w12_hw', 'text': '第一題:Text, questions, and art (文字、問題和藝術) \n 說明: input為輸入()中為問題,使用者輸入之答案會變成返回的值 \n input()程式範例:what\'s your name \n name = input("What\'s your name? ")  # 提示使用者輸入名字\nprint(f"My name is , {name}!")            # 使用 f-string 輸出打招呼的訊息\ninput("What\'s your name?") \n print()程式範例:cat \n print ("   /\\_/\\   ")\nprint (" >^.^<   ")\nprint ("    / \\    ")\nprint ("   (___)___") \n 第二題: 變數 \n 說明:Variables and string concatenation(變數和字串連接) \n 範例程式:名字 \n first_name = "yu" #變數first_name為"自己的姓"\nlast_name  = "chang" #變數last_name為"自己的名"\nprint (first_name) #列印變數first_name\nprint (last_name) #列印變數last_name \n 範例程式: 名字+最愛的食物 \n name = input("What\'s your name?") #變數name為input所輸入之文字\nfavorite_food = input ("What is your favorite food?") #變數favorite_food為input所輸入之文字\nprint ("Hi! My name is " + name) #列印"Hi! My name is "(這段為文字) + name(name這個變數的數值)\nprint ("My favorite food is " + favorite_food)  #列印"My favorite food is "(這段為文字) + favorite_food(favorite_food這個變數的數值)\nprint (name + "\'s favorite food is " + favorite_food) #列印name (數值)+ \'s favorite food is (此段為文字)+favorite_food(數值)\n \n 第三題:In a bookstore(在書店) \n 說明:Lists and if... in... / else... (列表和 if... in... / else...) \n 範例程式:if \n programming_books = ["Learn python", "Python for all",  "Intro to python"]\nprint (programming_books)\nwanted_book = input("Hi! What book would you like to buy?")\nprint (wanted_book)\nif wanted_book in programming_books:\n    print ("Yes, we sell it!")\nelse:\n    print ("Sorry, we don\'t sell that book") \n \xa0 \n 第四題: append()和remove() \n 說明: 使用append()進行加入接著使用remove()移除清單內無需購買之物品 \n 範例程式:購物清單 \n shopping_list = ["carrots", "chocolate", "olives"] #在shopping_list變數裡面有3個字串\nprint (shopping_list) #列印shopping_list變數\nnew_item = input("What else do I have to buy?") #設定一個變數為new_item其等於input指令回傳之數值\n \nif new_item in shopping_list:  #如果 "變數new_item(想買的物品)"回傳之值 在"shopping_list(購物清單)"字串當中就執行以下程式\n    print (new_item + " is/are already in the shopping list") #列印 "new_item變數的數值"+字串is/are already in the shopping list\n    print (shopping_list) #列印shopping_list字串\nelse:                    #反之\n    shopping_list.append(new_item) #購物清單.加入(想要購買的物品)    如果不在購物清單內那就將未在字串中物品加入購物清單\n    print (shopping_list) #列印購物清單\n#以下是移除物品的程式\nitem_to_remove = input("What do I have to remove?") #item_to_remove(想要移除的物品)\n \nif item_to_remove in shopping_list: #如果 想要移除的物品在購物清單中 那就執行\n    shopping_list.remove(item_to_remove) #把購物清單.移除(想要移除的物品)\n    print (shopping_list) #列印購物清單\nelse:                     #反之\n    print (item_to_remove + " is/are not in the list") #列印 想要移除的物品+is/are not in the list(不在清單中)\n    print (shopping_list) #列印購物清單 \n 第五題:Customizing the menu(自訂菜單) \n 說明:List methods: .index(), .pop(), and .insert() (列表方法: .index(), .pop(), and .insert()) \n 範例程式:menu \n todays_menu = ["burger", "salad", "coke"] #todays_menu變數=今天菜單["burger", "salad", "coke"\nside_dish_index = todays_menu.index("salad") #side_dish_index變數 = 今日菜單.找出"沙拉"位於字串中第幾個\nprint (side_dish_index) #列印side_dish_index  列印他在第幾位\ntodays_menu.pop(side_dish_index) #今日菜單.移除字串中的元素(side_dish_index變數"沙拉")  這裡意思是移除沙拉\nprint (todays_menu) #列印今日菜單\ntodays_menu.insert(side_dish_index, "fries") #今日菜單.在字串中插入(side_dish_index, "fries")   這裡意思是加入薯條\nprint (todays_menu) #列印今日菜單 \n 第六題:Traveling around the world(環遊世界) \n 說明: List slicing(串列切片) \n 範例程式:城市 \n # 定義一個名為 cities 的串列，包含五個城市名稱\ncities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"]\n  \n# 列印整個串列\nprint (cities)  # [\'San Diego\', \'Prague\', \'Cape Town\', \'Tokyo\', \'Melbourne\']\n  \n# 列印索引為 1 的元素\nprint (cities[1])  # \'Prague\'\n  \n# 列印從索引 1 到 3 的元素（不包含索引 4）\nprint (cities[1:4])  # [\'Prague\', \'Cape Town\', \'Tokyo\']\n  \n# 列印從索引 1 到 3 的元素，間隔為 2\nprint (cities[1:4:2])  # [\'Prague\', \'Tokyo\']\n  \n# 列印從索引 0 到 2 的元素（不包含索引 3）\nprint (cities[0:3])  # [\'San Diego\', \'Prague\', \'Cape Town\']\n  \n# 列印從開始到索引 2 的元素（不包含索引 3）\nprint (cities[:3])  # [\'San Diego\', \'Prague\', \'Cape Town\']\n  \n# 列印從索引 2 到 4 的元素（不包含索引 5）\nprint (cities[2:5])  # [\'Cape Town\', \'Tokyo\', \'Melbourne\']\n  \n# 列印從索引 2 到最後的元素\nprint (cities[2:])  # [\'Cape Town\', \'Tokyo\', \'Melbourne\']\n  \n# 列印從索引 0 到 4 的元素，每隔 2 個元素\nprint (cities[0:5:2])  # [\'San Diego\', \'Cape Town\', \'Melbourne\']\n  \n# 列印從頭到尾的元素，每隔 2 個元素\nprint (cities[::2])  # [\'San Diego\', \'Cape Town\', \'Melbourne\']\n  \n# 列印索引為 4 的元素\nprint (cities[4])  # \'Melbourne\'\n  \n# 列印最後一個元素（索引 -1）\nprint (cities[-1])  # \'Melbourne\'\n  \n# 列印從索引 -4 到 -2 的元素（不包含索引 -1）\nprint (cities[-4:-1])  # [\'Prague\', \'Cape Town\', \'Tokyo\']\n  \n# 列印從索引 3 到 1，反向取值\nprint (cities[3:0:-1])  # [\'Tokyo\', \'Cape Town\', \'Prague\']\n  \n# 列印從索引 -2 到 -4，反向取值\nprint (cities[-2:-5:-1])  # [\'Tokyo\', \'Cape Town\', \'Prague\']\n  \n# 列印整個串列，反轉順序\nprint (cities[::-1])  # [\'Melbourne\', \'Tokyo\', \'Cape Town\', \'Prague\', \'San Diego\'] \n 第七題:Senses, planets, and a houseng(感官、行星、房子) \n 說明:Changing, adding, and removing list elements using slicing(透過切片操作來更改、添加和刪除串列中的元素) \n 範例程式:感官 \n # 定義一個包含五種感官的清單\nsenses = ["eyes", "nose", "ears", "tongue", "skin"]\nprint(senses)  # 輸出原始的感官清單\n  \n# 將清單中索引為1的元素從 "nose" 改為 "smell"\nsenses[1] = "smell"\nprint(senses)  # 輸出更新後的感官清單\n  \n# 將索引範圍為3到5的元素（"tongue", "skin"）改為 ["taste", "touch"]\nsenses[3:5] = ["taste", "touch"]\nprint(senses)  # 輸出更新後的感官清單\n  \n# 將索引範圍從0到3，步長為2的元素（"eyes", "ears"）改為 ["sight", "hearing"]\nsenses[0:3:2] = ["sight", "hearing"]\nprint(senses)  # 輸出最終更新後的感官清單 \n 範例程式:行星 \n # 定義一個行星列表\nplanets = ["Mercury", "Mars", "Earth", "Neptune"]\n# 輸出原始行星列表\nprint(planets)\n  \n# 將 "Jupiter" 加入列表的末尾\nplanets = planets + ["Jupiter"]\n# 輸出更新後的行星列表\nprint(planets)\n  \n# 在索引 2 前插入 "Venus"\n# 先取出索引 0 到 1 的元素，然後加上 "Venus" 和索引 2 到 4 的元素\nplanets = planets[0:2] + ["Venus"] + planets[2:5]\n# 輸出再次更新的行星列表\nprint(planets)\n  \n# 在索引 5 位置後插入 "Uranus" 和 "Saturn"\n# 取出索引 0 到 4 的元素，加上新元素，然後加上索引 5 之後的元素\nplanets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]\n# 輸出最終的行星列表\nprint(planets) \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w16_exam1', 'text': '', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w7', 'text': 'def print_pyramid(高度): \n    對於範圍（高度）內的 i： \n        # 計算空格和星號的數量 \n        空格 = \' \' * (高度 - i - 1) \n        星星 = \'*\' * (2 * i + 1) \n        列印（空格+星號） \n \n#設定金字塔的高度 \n金字塔高度 = 6 \nprint_pyramid（金字塔高度） \n >pythonw -u "help_range.py"  \xa0 \xa0 \xa0 \xa0 \xa0 *  \xa0 \xa0 \xa0 \xa0 ***  \xa0 \xa0 \xa0 *****  \xa0 \xa0 *******  \xa0 *********  ***********  >退出代碼: 0 \n w8 \n \n 從 coppeliasim_zmqremoteapi_client 導入 RemoteAPIClient \n導入時間 \n進口鍵盤 \n \n#利用zmqRemoteAPI以23000對場景伺服器進行連線 \n客戶端 = RemoteAPIClient(\'[::1]\', 23000) \n# 以 getObject 方法取得場景對象 \nsim = client.getObject(\'sim\') \nbox = sim.getObject(\'/box\') \n \n# 啟動模擬 \nsim.startSimulation() \n \n# 設定立方體的尺寸和初始位置 \n立方體大小 = 0.2 # 20 厘米 \n開始_x = 0 \n起始y = 0 \n間距 = 0.5 # 50 cm 之間的距離（可依需求調整） \n \n# 收納立方體的行數和每行的數量 \nrows = 5 # 從第 1 行到第 5 行 \ncubes_in_row = [1, 3, 5, 7, 9] # 每行立方體的數量 \n \n# 在每一行存放立方體 \n對於範圍內的行（行）： \n    # 計算每行的起始x位置，使其最便宜 \n    start_row_x = start_x - (cubes_in_row[行] - 1) * 間距 / 2 \n     \n    對於範圍內的列（cubes_in_row[row]）： \n        # 計算每個立方體的位置 \n        x_position = start_row_x + col * 間距 \n        y_position = start_y + 行 * 間距 \n         \n        # 建立立方體 \n        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size,cube_size,cube_size], 0) \n        sim.setObjectPosition(cube_handle, -1, [x_position, y_position,cube_size / 2]) # z 方向上升到立方體的中心 \n \n# 完成正方體的收納盒 \nprint("立方體已成功出貨！") \n \n#設定主迴圈 \n而真實： \n    # 在這裡可以進行其他模擬操作 \n    time.sleep(0.1) #確保迴圈不會太快 \n \n    如果鍵盤.is_pressed(\'q\'): \n        # 可以按q鍵跳出重複執行迴圈 \n        休息 \n \n# 終止模擬 \nsim.stopSimulation() \n \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w8', 'text': '從 coppeliasim_zmqremoteapi_client 導入 RemoteAPIClient \n導入時間 \n進口鍵盤 \n \n#利用zmqRemoteAPI以23000對場景伺服器進行連線 \n客戶端 = RemoteAPIClient(\'[::1]\', 23000) \n# 以 getObject 方法取得場景對象 \nsim = client.getObject(\'sim\') \nbox = sim.getObject(\'/box\') \n \n# 啟動模擬 \nsim.startSimulation() \n \n# 設定立方體的尺寸和初始位置 \n立方體大小 = 0.2 # 20 厘米 \n開始_x = 0 \n起始y = 0 \n間距 = 0.5 # 50 cm 之間的距離（可依需求調整） \n \n# 收納立方體的行數和每行的數量 \nrows = 5 # 從第 1 行到第 5 行 \ncubes_in_row = [1, 3, 5, 7, 9] # 每行立方體的數量 \n \n# 在每一行存放立方體 \n對於範圍內的行（行）： \n    # 計算每行的起始x位置，使其最便宜 \n    start_row_x = start_x - (cubes_in_row[行] - 1) * 間距 / 2 \n     \n    對於範圍內的列（cubes_in_row[row]）： \n        # 計算每個立方體的位置 \n        x_position = start_row_x + col * 間距 \n        y_position = start_y + 行 * 間距 \n         \n        # 建立立方體 \n        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size,cube_size,cube_size], 0) \n        sim.setObjectPosition(cube_handle, -1, [x_position, y_position,cube_size / 2]) # z 方向上升到立方體的中心 \n \n# 完成正方體的收納盒 \nprint("立方體已成功出貨！") \n \n#設定主迴圈 \n而真實： \n    # 在這裡可以進行其他模擬操作 \n    time.sleep(0.1) #確保迴圈不會太快 \n \n    如果鍵盤.is_pressed(\'q\'): \n        # 可以按q鍵跳出重複執行迴圈 \n        休息 \n \n# 終止模擬 \nsim.stopSimulation() \n \n \n', 'tags': '', 'url': 'w8.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};